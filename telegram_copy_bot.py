# Support pour les cl√©s API Binance
import time
import json
import os
import sqlite3
import sys
import hmac
import hashlib
import base64
import asyncio
import requests
import traceback
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Charger les variables d'environnement avant toute autre initialisation
load_dotenv()

# D√©tection du mode (test ou production)
is_test_mode = os.getenv("TEST_MODE", "False").lower() == "true"

# Afficher clairement le mode actuel
if is_test_mode:
    print("‚ö†Ô∏è Mode TEST activ√© - Aucune connexion √† Binance ne sera tent√©e")
    print("   Pour activer le mode production, modifiez TEST_MODE=False dans le fichier .env")
else:
    print("üí∞ Mode PRODUCTION activ√© - Connexion r√©elle √† Binance")


from loguru import logger
from cryptography.fernet import Fernet

# Charger les variables d'environnement
load_dotenv()

# R√©cup√©rer les variables d'environnement
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID", 0))
DATABASE_PATH = os.getenv("DATABASE_URL", "sqlite:///copy_trader.db")
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")

# Extraire le chemin SQLite si n√©cessaire
if DATABASE_PATH.startswith("sqlite:///"):
    DATABASE_PATH = DATABASE_PATH[len("sqlite:///"):]

# Dictionnaire pour stocker l'√©tat des utilisateurs (pour les commandes interactives)
user_states = {}

# Initialisation du chiffrement
try:
    # Si une cl√© est fournie, l'utiliser ; sinon, en g√©n√©rer une nouvelle
    if ENCRYPTION_KEY:
        fernet = Fernet(ENCRYPTION_KEY.encode())
    else:
        # G√©n√©rer une cl√© (seulement pour le d√©veloppement, pour la production, utilisez une cl√© fixe)
        key = Fernet.generate_key()
        fernet = Fernet(key)
        logger.warning(f"Aucune cl√© de chiffrement fournie, utilisation d'une cl√© temporaire : {key.decode()}")
    logger.info("Chiffrement initialis√© avec succ√®s")
except Exception as e:
    logger.error(f"Erreur lors de l'initialisation du chiffrement : {e}")
    fernet = None

# Variables globales
copy_trader = None

# Cache pour les donn√©es de march√©
market_data_cache = {}
market_data_timestamp = {}
CACHE_DURATION = 300  # 5 minutes en secondes

# Client Binance
async def get_binance_client(api_key=None, api_secret=None):
    """Initialises et retourne un client Binance Futures"""
    # Si en mode test, retourner directement un client mock√©
    if os.getenv("TEST_MODE", "False").lower() == "true":
        logger.info("Mode test activ√©, utilisation d'un client Binance mock√©")
        return MockBinanceClient()
    
    from binance.client import Client
    
    # Si aucune cl√© fournie, utiliser les cl√©s master
    if not api_key or not api_secret:
        api_key = os.getenv("MASTER_BINANCE_API_KEY")
        api_secret = os.getenv("MASTER_BINANCE_API_SECRET")
    
    # V√©rifier si on utilise le testnet
    testnet = os.getenv("BINANCE_TESTNET", "False").lower() == "true"
    
    # Cr√©er le client avec configuration explicite des URLs
    client = Client(api_key, api_secret, testnet=testnet)
    
    # Configuration explicite des URLs pour √©viter les erreurs "API-key format invalid"
    if testnet:
        # URLs pour le testnet selon la documentation officielle
        client.API_URL = 'https://testnet.binance.vision/api'
        client.FUTURES_URL = 'https://testnet.binancefuture.com'
    else:
        # URLs pour la production selon la documentation officielle
        client.API_URL = 'https://api.binance.com/api'
        client.FUTURES_URL = 'https://fapi.binance.com'
    
    logger.info(f"Client Binance configur√© avec URL Futures: {client.FUTURES_URL}")
    
    return client

# Client mock√© pour le mode test
class MockBinanceClient:
    """Client Binance mock√© pour le mode test"""
    
    async def futures_account(self):
        """Simule le compte futures"""
        return {
            "totalWalletBalance": "10000.00",
            "totalUnrealizedProfit": "250.00",
            "availableBalance": "9750.00",
            "positions": [
                {
                    "symbol": "BTCUSDT",
                    "positionAmt": "0.01",
                    "entryPrice": "50000",
                    "markPrice": "50600",
                    "unRealizedProfit": "60"
                },
                {
                    "symbol": "ETHUSDT",
                    "positionAmt": "-0.2",
                    "entryPrice": "2500",
                    "markPrice": "2487.5",
                    "unRealizedProfit": "2.5"
                }
            ]
        }
    
    async def futures_position_information(self, symbol=None):
        """Simule les informations de position"""
        positions = [
            {
                "symbol": "BTCUSDT",
                "positionAmt": "0.01",
                "entryPrice": "50000",
                "markPrice": "50600",
                "unRealizedProfit": "60",
                "liquidationPrice": "0",
                "leverage": "10",
                "maxNotionalValue": "1000000",
                "marginType": "isolated",
                "isolatedMargin": "500",
                "isAutoAddMargin": "false",
                "positionSide": "BOTH"
            },
            {
                "symbol": "ETHUSDT",
                "positionAmt": "-0.2",
                "entryPrice": "2500",
                "markPrice": "2487.5",
                "unRealizedProfit": "2.5",
                "liquidationPrice": "0",
                "leverage": "10",
                "maxNotionalValue": "1000000",
                "marginType": "isolated",
                "isolatedMargin": "500",
                "isAutoAddMargin": "false",
                "positionSide": "BOTH"
            }
        ]
        
        if symbol:
            return [p for p in positions if p["symbol"] == symbol]
        
        return positions
    
    async def futures_ticker(self, symbol=None):
        """Simule le ticker futures"""
        tickers = {
            "BTCUSDT": {
                "symbol": "BTCUSDT",
                "lastPrice": "50600",
                "volume": "1000000",
                "priceChangePercent": "1.2",
                "highPrice": "51000",
                "lowPrice": "49500"
            },
            "ETHUSDT": {
                "symbol": "ETHUSDT",
                "lastPrice": "2487.5",
                "volume": "500000",
                "priceChangePercent": "-0.5",
                "highPrice": "2550",
                "lowPrice": "2450"
            }
        }
        
        if symbol and symbol in tickers:
            return tickers[symbol]
        elif symbol:
            return {
                "symbol": symbol,
                "lastPrice": "100",
                "volume": "10000",
                "priceChangePercent": "0",
                "highPrice": "105",
                "lowPrice": "95"
            }
        
        return list(tickers.values())
    
    async def futures_klines(self, symbol=None, interval=None, limit=None):
        """Simule les klines futures"""
        return [[0, 100, 105, 95, 102, 10000, 0, 0, 0, 0, 0]]

# Fonction pour initialiser la base de donn√©es
async def init_db():
    """Initialise la base de donn√©es avec les tables n√©cessaires"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # Cr√©ation de la table des utilisateurs
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            binance_api_key BLOB,
            binance_api_secret BLOB,
            is_active INTEGER DEFAULT 0,
            is_admin INTEGER DEFAULT 0,
            risk_factor REAL DEFAULT 1.0,
            max_position_size REAL DEFAULT 100.0,
            take_profit REAL DEFAULT 0,
            stop_loss REAL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # V√©rifier si les colonnes de risque existent, sinon les ajouter
    # Cette partie corrige l'erreur "no such column: risk_factor"
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]
    
    # Ajouter les colonnes manquantes si n√©cessaire
    if 'risk_factor' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN risk_factor REAL DEFAULT 1.0")
    
    if 'max_position_size' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN max_position_size REAL DEFAULT 100.0")
    
    if 'take_profit' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN take_profit REAL DEFAULT 0")
    
    if 'stop_loss' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN stop_loss REAL DEFAULT 0")
    
    # Cr√©er la table des trades
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS trades (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            symbol TEXT,
            side TEXT,
            position_side TEXT,
            entry_price REAL,
            exit_price REAL,
            quantity REAL,
            pnl REAL,
            status TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """)
    
    conn.commit()
    conn.close()
    
    logger.info("Database initialized")

# Fonctions d'aide pour la base de donn√©es
async def add_user(telegram_id, username=None, first_name=None, last_name=None, is_admin=False):
    """Ajoute un utilisateur √† la base de donn√©es ou le met √† jour s'il existe d√©j√†"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # V√©rifier si l'utilisateur existe d√©j√†
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    
    if user:
        # Mettre √† jour l'utilisateur existant
        cursor.execute("""
            UPDATE users SET 
                username = COALESCE(?, username),
                first_name = COALESCE(?, first_name),
                last_name = COALESCE(?, last_name),
                is_admin = ?,
                updated_at = CURRENT_TIMESTAMP
            WHERE telegram_id = ?
        """, (username, first_name, last_name, 1 if is_admin else 0, telegram_id))
    else:
        # Cr√©er un nouvel utilisateur
        cursor.execute("""
            INSERT INTO users (
                telegram_id, username, first_name, last_name, is_admin
            ) VALUES (?, ?, ?, ?, ?)
        """, (telegram_id, username, first_name, last_name, 1 if is_admin else 0))
    
    conn.commit()
    conn.close()

async def get_user(telegram_id):
    """R√©cup√®re les informations d'un utilisateur depuis la base de donn√©es"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT telegram_id, username, first_name, last_name, binance_api_key, binance_api_secret, " +
        "is_active, is_admin, risk_factor, max_position_size, take_profit, stop_loss " +
        "FROM users WHERE telegram_id = ?", 
        (telegram_id,)
    )
    
    user = cursor.fetchone()
    
    conn.close()
    
    if user:
        return {
            "id": user[0],
            "username": user[1],
            "first_name": user[2],
            "last_name": user[3],
            "is_active": bool(user[6]),
            "is_admin": bool(user[7]),
            "risk_factor": user[8] if user[8] is not None else 1.0,
            "max_position_size": user[9] if user[9] is not None else 100.0,
            "take_profit": user[10] if user[10] is not None else 0.0,
            "stop_loss": user[11] if user[11] is not None else 0.0
        }
    return None

# Fonctions de chiffrement
def encrypt_api_key(api_key):
    """Chiffre une cl√© API"""
    if isinstance(api_key, str):
        api_key = api_key.encode()
    return fernet.encrypt(api_key)

def decrypt_api_key(encrypted_key):
    """D√©chiffre une cl√© API"""
    if encrypted_key:
        try:
            decrypted = fernet.decrypt(encrypted_key)
            result = decrypted.decode().strip()
            return result
        except Exception as e:
            logger.error(f"Erreur lors du d√©chiffrement de la cl√© API: {e}")
    return None

async def add_binance_keys(telegram_id, api_key, api_secret):
    """Ajoute ou met √† jour les cl√©s API Binance d'un utilisateur"""
    encrypted_api_key = encrypt_api_key(api_key)
    encrypted_api_secret = encrypt_api_key(api_secret)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("""
        UPDATE users SET 
            binance_api_key = ?,
            binance_api_secret = ?,
            updated_at = CURRENT_TIMESTAMP
        WHERE telegram_id = ?
    """, (encrypted_api_key, encrypted_api_secret, telegram_id))
    
    conn.commit()
    conn.close()

async def get_binance_keys(telegram_id):
    """R√©cup√®re les cl√©s API Binance d'un utilisateur"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT binance_api_key, binance_api_secret FROM users WHERE telegram_id = ?", (telegram_id,))
    keys = cursor.fetchone()
    
    conn.close()
    
    if keys and keys[0] and keys[1]:
        return decrypt_api_key(keys[0]), decrypt_api_key(keys[1])
    return None, None

async def handle_api_command(chat_id, user, args=None):
    """Gestion de la commande /api pour enregistrer les cl√©s API"""
    # Si c'est une commande sans arguments, on explique comment l'utiliser
    if not args:
        send_telegram_message(chat_id, "Format incorrect. Utilisez /api VOTRE_CLE_API VOTRE_CLE_SECRETE")
        return
    
    # Si l'utilisateur est en attente d'une cl√© API secr√®te
    if len(args) == 1 and user_states.get(chat_id, {}).get('state') == 'waiting_for_api_secret':
        api_key = user_states[chat_id]['api_key']
        api_secret = args[0]
        
        # Supprimer l'√©tat
        if chat_id in user_states:
            del user_states[chat_id]
            
        # Enregistrer les cl√©s
        await add_binance_keys(user["id"], api_key, api_secret)
        
        # D√©finir les param√®tres de risque par d√©faut s'ils n'existent pas
        await update_risk_settings(user["id"])
        
        confirmation = """<b>√Ä Vos cl√©s API ont √©t√© enregistr√©es avec succ√®s!</b>

La copie des trades est maintenant activ√©e pour votre compte.

Utilisez /risk pour configurer vos param√®tres de risque.
Utilisez /status pour voir l'√©tat actuel de vos positions."""

        send_telegram_message(chat_id, confirmation)
        
        # Notifier l'administrateur
        if user["id"] != ADMIN_ID:
            admin_msg = f"Nouvel utilisateur enregistr√©: {user.get('first_name')} (@{user.get('username')}) - ID: {user['id']}"
            send_telegram_message(ADMIN_ID, admin_msg)
        return
    
    # Si l'utilisateur envoie juste la cl√© API, on lui demande la cl√© secr√®te
    if len(args) == 1:
        api_key = args[0]
        
        # Stockage temporaire de la cl√© API
        user_states[chat_id] = {
            'state': 'waiting_for_api_secret',
            'api_key': api_key
        }
        
        send_telegram_message(chat_id, "Veuillez maintenant envoyer votre cl√© secr√®te Binance.")
        return
    
    # Si l'utilisateur envoie les deux cl√©s dans la m√™me commande
    if len(args) >= 2:
        api_key = args[0]
        api_secret = args[1]
        
        # V√©rification basique de la validit√© des cl√©s
        if len(api_key) < 10 or len(api_secret) < 10:
            send_telegram_message(chat_id, "Les cl√©s API semblent invalides. Veuillez v√©rifier et r√©essayer.")
            return
        
        # Enregistrer les cl√©s
        await add_binance_keys(user["id"], api_key, api_secret)
        
        # D√©finir les param√®tres de risque par d√©faut s'ils n'existent pas
        await update_risk_settings(user["id"])
        
        confirmation = """<b>√Ä Vos cl√©s API ont √©t√© enregistr√©es avec succ√®s!</b>

La copie des trades est maintenant activ√©e pour votre compte.

Utilisez /risk pour configurer vos param√®tres de risque.
Utilisez /status pour voir l'√©tat actuel de vos positions."""

        send_telegram_message(chat_id, confirmation)
        
        # Notifier l'administrateur
        if user["id"] != ADMIN_ID:
            admin_msg = f"Nouvel utilisateur enregistr√©: {user.get('first_name')} (@{user.get('username')}) - ID: {user['id']}"
            send_telegram_message(ADMIN_ID, admin_msg)

# Fonction pour mettre √† jour les param√®tres de risque
async def update_risk_settings(telegram_id, risk_factor=None, max_position_size=None, take_profit=None, stop_loss=None):
    """Met √† jour les param√®tres de risque d'un utilisateur"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # V√©rifier d'abord si les param√®tres existent d√©j√†
    cursor.execute('SELECT risk_factor, max_position_size, take_profit, stop_loss FROM users WHERE telegram_id = ?', (telegram_id,))
    current_settings = cursor.fetchone()
    
    # Si aucun param√®tre n'est fourni, utiliser les valeurs par d√©faut ou conserver les valeurs actuelles
    if risk_factor is None:
        risk_factor = current_settings[0] if current_settings and current_settings[0] else 1.0
    
    if max_position_size is None:
        max_position_size = current_settings[1] if current_settings and current_settings[1] else 100.0
    
    if take_profit is None:
        take_profit = current_settings[2] if current_settings and current_settings[2] else 0.0
    
    if stop_loss is None:
        stop_loss = current_settings[3] if current_settings and current_settings[3] else 0.0
    
    # Mettre √† jour les param√®tres
    cursor.execute("""
        UPDATE users SET 
            risk_factor = ?,
            max_position_size = ?,
            take_profit = ?,
            stop_loss = ?,
            updated_at = CURRENT_TIMESTAMP
        WHERE telegram_id = ?
    """, (risk_factor, max_position_size, take_profit, stop_loss, telegram_id))
    
    conn.commit()
    conn.close()
    
    logger.info(f"Param√®tres de risque mis √† jour pour l'utilisateur {telegram_id}")
    return True

# Fonctions pour l'API Telegram
def send_telegram_message(chat_id, text, parse_mode="HTML", reply_markup=None):
    """Envoie un message via l'API Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    # Pr√©parer les donn√©es
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    # Ajouter les boutons si sp√©cifi√©s
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    # Envoyer la requ√™te
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
        logger.info(f"Message sent to {chat_id}")
        return response.json()
    except Exception as e:
        logger.error(f"Erreur lors de l'envoi du message Telegram: {e}")
        return None

async def get_telegram_updates(offset=None, timeout=30):
    """R√©cup√®re les mises √† jour de l'API Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    params = {"timeout": timeout}
    
    if offset:
        params["offset"] = offset
    
    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Failed to get updates: {response.text}")
            return {"ok": False, "result": []}
    except Exception as e:
        logger.error(f"Error getting updates: {e}")
        return {"ok": False, "result": []}

# Fonction pour d√©marrer le copy trader
async def start_copy_trader():
    """D√©marrer le syst√®me de copy trading s'il n'est pas d√©j√† en cours d'ex√©cution"""
    global copy_trader
    
    # V√©rifier si le copy trader est d√©j√† en cours d'ex√©cution
    if copy_trader and copy_trader.running:
        logger.info("Copy trader est d√©j√† en cours d'ex√©cution")
        return
    
    # Mode test (ignorer les erreurs de connexion Binance)
    test_mode = os.getenv("TEST_MODE", "False").lower() == "true"
    # En mode test, utiliser un copy trader simul√©
    if test_mode:
        logger.warning("Mode test activ√©: le copy trader fonctionne en mode simul√© sans connexion r√©elle √† Binance")
        
        # Cr√©er une classe simul√©e avec les m√™mes m√©thodes que le vrai copy trader
        class MockCopyTrader:
            def __init__(self):
                self.running = True
                self.active_users = {}  # Utilisateurs actifs simul√©s
                self.master_client = None  # Client simul√©
                self.follower_clients = {}  # Clients d'abonn√©s simul√©s
                self.master_positions = []  # Positions simul√©es
                self.user_positions = {}  # Positions des utilisateurs simul√©es
                logger.info("MockCopyTrader initialis√©")
                
            def start(self):
                logger.info("MockCopyTrader d√©marr√©")
                
            def stop(self):
                self.running = False
                logger.info("MockCopyTrader arr√™t√©")
            
            def reload_users(self):
                # Simule le rechargement des utilisateurs depuis la base de donn√©es
                logger.info("Mode test: rechargement simul√© des utilisateurs")
                
                # Charger les utilisateurs actifs depuis la base de donn√©es r√©elle
                conn = sqlite3.connect(DATABASE_PATH)
                cursor = conn.cursor()
                cursor.execute("SELECT telegram_id FROM users WHERE is_active = 1")
                users = cursor.fetchall()
                conn.close()
                
                # Simuler l'ajout des utilisateurs actifs
                for user in users:
                    telegram_id = user[0]
                    self.active_users[telegram_id] = {
                        'telegram_id': telegram_id,
                        'risk_factor': 1.0,
                        'max_position_size': 100.0,
                        'client': None  # Pas de vrai client en mode test
                    }
                    
                logger.info(f"Mode test: {len(self.active_users)} utilisateurs actifs charg√©s")
                return True
                
            def get_master_positions(self):
                # Retourne des positions simul√©es pour le compte ma√Ætre
                return [
                    {"symbol": "BTCUSDT", "positionAmt": "0.01", "entryPrice": "50000", "markPrice": "50500", "unRealizedProfit": "5.0"},
                    {"symbol": "ETHUSDT", "positionAmt": "-0.5", "entryPrice": "2600", "markPrice": "2590", "unRealizedProfit": "5.0"}
                ]
                
            def get_user_positions(self, telegram_id):
                # Retourne des positions simul√©es pour un utilisateur sp√©cifique
                return [
                    {"symbol": "BTCUSDT", "positionAmt": "0.005", "entryPrice": "50100", "markPrice": "50500", "unRealizedProfit": "2.0"},
                    {"symbol": "ETHUSDT", "positionAmt": "-0.2", "entryPrice": "2580", "markPrice": "2590", "unRealizedProfit": "-2.0"}
                ]
                
            def add_user(self, telegram_id, api_key, api_secret, risk_factor=1.0, max_position_size=0.0):
                # Simule l'ajout d'un nouvel utilisateur
                logger.info(f"Mode test: ajout simul√© de l'utilisateur {telegram_id}")
                self.active_users[telegram_id] = {
                    'telegram_id': telegram_id,
                    'risk_factor': risk_factor,
                    'max_position_size': max_position_size,
                    'client': None  # Pas de vrai client en mode test
                }
                return True
                
            def remove_user(self, telegram_id):
                # Simule la suppression d'un utilisateur
                if telegram_id in self.active_users:
                    del self.active_users[telegram_id]
                    logger.info(f"Mode test: utilisateur {telegram_id} supprim√©")
                    return True
                return False
        
        copy_trader = MockCopyTrader()
        copy_trader.start()
        logger.info("Copy trader simul√© d√©marr√© avec succ√®s")
        return
        
    # R√©cup√©rer les cl√©s API du compte ma√Ætre
    master_api_key = os.getenv("MASTER_BINANCE_API_KEY")
    master_api_secret = os.getenv("MASTER_BINANCE_API_SECRET")
    
    if not master_api_key or not master_api_secret:
        logger.error("Cl√©s API du compte ma√Ætre non configur√©es dans .env")
        return
    
    # Testnet ou production
    testnet = os.getenv("BINANCE_TESTNET", "False").lower() == "true"
    
    try:
        from copy_trader import CopyTrader
        
        # Initialiser et d√©marrer le copy trader
        copy_trader = CopyTrader(
            master_api_key=master_api_key,
            master_api_secret=master_api_secret,
            database_path=DATABASE_PATH,
            testnet=testnet
        )
        
        copy_trader.start()
        logger.info("Copy trader d√©marr√© avec succ√®s")
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage du copy trader: {e}")

# Fonction pour arr√™ter le copy trader
async def stop_copy_trader():
    """Arr√™ter le syst√®me de copy trading"""
    global copy_trader
    
    if copy_trader and copy_trader.running:
        copy_trader.stop()
        logger.info("Copy trader arr√™t√©")

# Handlers de commandes
async def handle_start_command(chat_id, user):
    """Gestion de la commande /start"""
    # V√©rifier si l'utilisateur est nouveau ou s'il se reconnecte
    if not user:
        # Nouvel utilisateur : initialiser dans la base de donn√©es
        username = f"user_{chat_id}"  # Remplacer par le vrai username si disponible
        await add_user(chat_id, username, "", "")
        
        welcome_text = """<b>ud83dudc4b Bienvenue sur le Bot de Copy Trading Binance!</b>

Ce bot vous permet de copier automatiquement les trades d'un compte ma√Ætre sur votre compte Binance Futures.

Pour commencer, suivez ces √©tapes:
1. Utilisez /subscribe pour vous abonner au service
2. Configurez vos cl√©s API Binance avec /api
3. Personnalisez vos param√®tres de risque avec /risk

Utilisez /help pour voir toutes les commandes disponibles."""

    else:
        # Utilisateur existant : r√©activer son compte
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE users SET 
                is_active = 1,
                updated_at = CURRENT_TIMESTAMP
            WHERE telegram_id = ?
        """, (chat_id,))
        
        conn.commit()
        conn.close()
        
        welcome_text = """<b>u2705 Copy Trading r√©activ√©!</b>

Votre compte a √©t√© r√©activ√© et le copy trading est maintenant actif.
Vous recevrez d√©sormais les trades du compte ma√Ætre selon vos param√®tres de risque.

Utilisez /status pour voir l'√©tat de votre compte.
Utilisez /risk pour configurer vos param√®tres de risque."""

    # Essayer de d√©marrer le copy trader si ce n'est pas d√©j√† fait
    await start_copy_trader()
        
    # Envoyer le message de bienvenue
    send_telegram_message(chat_id, welcome_text)

async def handle_help_command(chat_id, user):
    """Gestion de la commande /help"""
    help_text = """<b>ud83eudd16 Bot de Copy Trading Binance - Aide</b>

Voici les commandes disponibles:

/start - D√©marrer ou r√©activer le bot
/subscribe - S'abonner au service de copy trading
/api - Configurer vos cl√©s API Binance
/risk - Configurer vos param√®tres de risque
/status - Voir l'√©tat de vos positions
/history - Voir l'historique de vos trades
/stop - D√©sactiver le copy trading
/unregister - Supprimer vos cl√©s API
/help - Afficher cette aide

Pour plus d'informations, contactez l'administrateur."""
    
    send_telegram_message(chat_id, help_text)

async def handle_subscribe_command(chat_id, user):
    """Gestion de la commande /subscribe pour activer le copy trading"""
    # V√©rifier si l'utilisateur existe et a des cl√©s API configur√©es
    api_key, api_secret = await get_binance_keys(user["id"])
    
    if not api_key or not api_secret:
        # L'utilisateur n'a pas encore configur√© ses cl√©s API
        subscribe_text = """<b>u26a0ufe0f Configuration incompl√®te</b>

Vous devez d'abord configurer vos cl√©s API Binance pour pouvoir vous abonner au copy trading.

Utilisez la commande /api pour configurer vos cl√©s."""
        send_telegram_message(chat_id, subscribe_text)
        return
    
    # V√©rifier si l'utilisateur a d√©j√† configur√© ses param√®tres de risque
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('SELECT is_active, risk_factor, max_position_size FROM users WHERE telegram_id = ?', (user["id"],))
    user_settings = cursor.fetchone()
    
    if user_settings and user_settings[0]:
        # L'utilisateur est d√©j√† actif
        subscribe_text = """<b>ud83dude80 D√©j√† abonn√©!</b>

Vous √™tes d√©j√† abonn√© au service de copy trading.

Vos param√®tres actuels:
<b>Facteur de risque:</b> {risk_factor}x
<b>Taille max de position:</b> {max_position} USDT

Utilisez /status pour voir l'√©tat de vos positions.
Utilisez /risk pour modifier vos param√®tres de risque.
Utilisez /stop pour d√©sactiver le copy trading.""".format(
            risk_factor=user_settings[1],
            max_position=user_settings[2]
        )
        send_telegram_message(chat_id, subscribe_text)
        return
    
    # Activer le copy trading pour cet utilisateur
    cursor.execute('UPDATE users SET is_active = 1 WHERE telegram_id = ?', (user["id"],))
    conn.commit()
    
    # V√©rifier si l'utilisateur a des param√®tres de risque
    if not user_settings or not user_settings[1]:
        # Configurer des param√®tres par d√©faut
        await update_risk_settings(user["id"])
        cursor.execute('SELECT risk_factor, max_position_size FROM users WHERE telegram_id = ?', (user["id"],))
        default_settings = cursor.fetchone()
        risk_factor = default_settings[0]
        max_position = default_settings[1]
    else:
        risk_factor = user_settings[1]
        max_position = user_settings[2]
    
    conn.close()
    
    # Informer l'utilisateur
    subscribe_text = """<b>ud83dude80 Abonnement activ√©!</b>

Votre compte est maintenant configur√© pour recevoir les copy trades.

Vos param√®tres:
<b>Facteur de risque:</b> {risk_factor}x
<b>Taille max de position:</b> {max_position} USDT

Vous recevrez automatiquement les trades du compte principal selon vos param√®tres de risque.

Utilisez /status pour voir l'√©tat de vos positions.
Utilisez /risk pour modifier vos param√®tres de risque.
Utilisez /stop pour d√©sactiver le copy trading √† tout moment.""".format(
        risk_factor=risk_factor,
        max_position=max_position
    )
    
    send_telegram_message(chat_id, subscribe_text)
    
    # Mettre √† jour le copy trader
    copy_trader.reload_users()
    
    logger.info(f"Utilisateur {user['id']} abonn√© au copy trading")

async def handle_risk_command(chat_id, user, args=None):
    """Gestion de la commande /risk pour configurer les param√®tres de risque"""
    # V√©rifier si l'utilisateur est configur√©
    api_key, api_secret = await get_binance_keys(user["id"])
    
    if not api_key or not api_secret:
        send_telegram_message(chat_id, "<b>u26a0ufe0f Vous devez d'abord configurer vos cl√©s API</b>\n\nUtilisez /api pour configurer vos cl√©s API Binance.")
        return
    
    # Si des arguments sont fournis, mettre √† jour les param√®tres
    if args and len(args) > 0:
        try:
            # Extraire les param√®tres de risque
            risk_factor = float(args[0]) if len(args) > 0 else None
            max_position = float(args[1]) if len(args) > 1 else None
            take_profit = float(args[2]) if len(args) > 2 else None
            stop_loss = float(args[3]) if len(args) > 3 else None
            
            # Valider les valeurs
            if risk_factor is not None and (risk_factor <= 0 or risk_factor > 10):
                send_telegram_message(chat_id, "<b>u26a0ufe0f Erreur:</b> Le facteur de risque doit √™tre compris entre 0 et 10.")
                return
            
            if max_position is not None and (max_position <= 0 or max_position > 1000):
                send_telegram_message(chat_id, "<b>u26a0ufe0f Erreur:</b> La taille maximum de position doit √™tre comprise entre 0 et 1000 USDT.")
                return
            
            # Mettre √† jour les param√®tres
            await update_risk_settings(user["id"], risk_factor, max_position, take_profit, stop_loss)
            
            # R√©cup√©rer les param√®tres de risque mis √† jour pour les afficher
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            
            cursor.execute("SELECT risk_factor, max_position_size, take_profit, stop_loss FROM users WHERE telegram_id = ?", (user["id"],))
            settings = cursor.fetchone()
            
            conn.close()
            
            if settings:
                risk_text = f"""<b>u2705 Param√®tres de risque mis √† jour!</b>

Vos nouveaux param√®tres sont:
- <b>Facteur de risque:</b> {settings[0]}x
- <b>Taille max de position:</b> {settings[1]} USDT
- <b>Take Profit:</b> {settings[2]}%
- <b>Stop Loss:</b> {settings[3]}%

Ces param√®tres seront appliqu√©s √† tous vos futurs trades."""
                
                send_telegram_message(chat_id, risk_text)
            else:
                send_telegram_message(chat_id, "<b>u26a0ufe0f Erreur:</b> Impossible de r√©cup√©rer vos param√®tres de risque. Veuillez r√©essayer.")
                
        except ValueError:
            send_telegram_message(chat_id, "<b>u26a0ufe0f Format invalide!</b>\n\nUtilisez /risk FACTEUR_RISQUE TAILLE_MAX_POSITION [TAKE_PROFIT] [STOP_LOSS]\n\nExemple: /risk 1.5 100 3 2")
    else:
        # Afficher les param√®tres actuels
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute("SELECT risk_factor, max_position_size, take_profit, stop_loss FROM users WHERE telegram_id = ?", (user["id"],))
        settings = cursor.fetchone()
        
        conn.close()
        
        if settings:
            risk_text = f"""<b>ud83dudccf Param√®tres de risque actuels</b>

- <b>Facteur de risque:</b> {settings[0]}x
- <b>Taille max de position:</b> {settings[1]} USDT
- <b>Take Profit:</b> {settings[2]}%
- <b>Stop Loss:</b> {settings[3]}%

Pour modifier ces param√®tres, utilisez la commande:
/risk FACTEUR_RISQUE TAILLE_MAX_POSITION [TAKE_PROFIT] [STOP_LOSS]

Exemple: /risk 1.5 100 3 2

Le facteur de risque multiplie la taille des positions du compte ma√Ætre.
Une valeur de 1.0 signifie que vous copiez exactement les positions du ma√Ætre."""
        else:
            # Cr√©er des param√®tres par d√©faut
            await update_risk_settings(user["id"])
            
            risk_text = """<b>ud83dudccf Param√®tres de risque par d√©faut</b>

- <b>Facteur de risque:</b> 1.0x
- <b>Taille max de position:</b> 100 USDT
- <b>Take Profit:</b> 0% (suit le ma√Ætre)
- <b>Stop Loss:</b> 0% (suit le ma√Ætre)

Pour modifier ces param√®tres, utilisez la commande:
/risk FACTEUR_RISQUE TAILLE_MAX_POSITION [TAKE_PROFIT] [STOP_LOSS]

Exemple: /risk 1.5 100 3 2

Le facteur de risque multiplie la taille des positions du compte ma√Ætre.
Une valeur de 1.0 signifie que vous copiez exactement les positions du ma√Ætre."""
        
        send_telegram_message(chat_id, risk_text)

async def get_market_data(symbol, force_refresh=False):
    """R√©cup√®re les donn√©es de march√© avec mise en cache"""
    global market_data_cache, market_data_timestamp
    
    now = time.time()
    
    # V√©rifier si les donn√©es sont en cache et valides
    if not force_refresh and symbol in market_data_cache and now - market_data_timestamp.get(symbol, 0) < CACHE_DURATION:
        logger.debug(f"Utilisation des donn√©es en cache pour {symbol}")
        return market_data_cache[symbol]
    
    try:
        # R√©cup√©rer les donn√©es fra√Æches
        logger.info(f"R√©cup√©ration des donn√©es de march√© pour {symbol}")
        
        # Mode test - g√©n√©ration de donn√©es fictives
        if os.getenv("TEST_MODE", "False").lower() == "true":
            data = {
                "symbol": symbol,
                "price": 50000 if "BTC" in symbol else (2500 if "ETH" in symbol else 1.0),
                "volume": 1000000,
                "change_24h": 2.5,
                "high_24h": 51000 if "BTC" in symbol else (2600 if "ETH" in symbol else 1.1),
                "low_24h": 49000 if "BTC" in symbol else (2400 if "ETH" in symbol else 0.9),
                "timestamp": now
            }
        else:
            # Appel Binance API
            binance_client = await get_binance_client()
            ticker = await binance_client.futures_ticker(symbol=symbol)
            klines = await binance_client.futures_klines(symbol=symbol, interval="1d", limit=1)
            
            data = {
                "symbol": symbol,
                "price": float(ticker["lastPrice"]),
                "volume": float(ticker["volume"]),
                "change_24h": float(ticker["priceChangePercent"]),
                "high_24h": float(ticker["highPrice"]),
                "low_24h": float(ticker["lowPrice"]),
                "timestamp": now
            }
        
        # Mettre en cache
        market_data_cache[symbol] = data
        market_data_timestamp[symbol] = now
        
        return data
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des donn√©es de march√© pour {symbol}: {e}")
        
        # Retourner les donn√©es en cache si disponibles, m√™me si expir√©es
        if symbol in market_data_cache:
            logger.warning(f"Utilisation des donn√©es en cache expir√©es pour {symbol}")
            return market_data_cache[symbol]
        
        # Sinon, retourner des donn√©es par d√©faut
        return {
            "symbol": symbol,
            "price": 0,
            "volume": 0,
            "change_24h": 0,
            "high_24h": 0,
            "low_24h": 0,
            "timestamp": now
        }

async def handle_status_command(chat_id, user):
    """Gestion de la commande /status pour v√©rifier l'√©tat du compte et des trades en cours"""
    # V√©rifier si l'utilisateur est configur√©
    try:
        # V√©rifier d'abord si le mode test est activ√© - PRIORIT√â ABSOLUE
        is_test_mode = os.getenv("TEST_MODE", "False").lower() == "true"
        
        # En mode test, on ne tente jamais de se connecter √† Binance
        if is_test_mode:
            logger.info("handle_status_command: Mode test activ√©, utilisation de donn√©es simul√©es")
            
            # V√©rifier si l'utilisateur a des cl√©s API
            api_key, api_secret = await get_binance_keys(user["id"])
            if not api_key or not api_secret:
                send_telegram_message(chat_id, "<b>u26a0ufe0f Compte non configur√©</b>\n\nVous n'avez pas configur√© vos cl√©s API Binance. Utilisez la commande /api pour les configurer.")
                return
                
            # G√©n√©rer des donn√©es fictives en mode test
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT is_active, risk_factor, max_position_size, take_profit, stop_loss FROM users WHERE telegram_id = ?", (user["id"],))
            user_data = cursor.fetchone()
            conn.close()
            
            # Texte du statut
            status_text = f"<b>ud83dudd0e Statut de votre compte (MODE TEST)</b>\n\n"
            
            if user_data and user_data[0] == 1:  # is_active
                status_text += "u2705 <b>Copy Trading:</b> Activ√©\n"
            else:
                status_text += "u274c <b>Copy Trading:</b> D√©sactiv√©\n"
            
            status_text += f"ud83dudcb0 <b>Solde:</b> 10,000 USDT\n"
            status_text += f"ud83dudcb8 <b>PnL journalier:</b> +250 USDT (+2.5%)\n\n"
            
            # Param√®tres de risque
            if user_data:
                risk_factor = user_data[1] if user_data[1] is not None else 1.0
                max_position = user_data[2] if user_data[2] is not None else 0.0
                take_profit = user_data[3] if user_data[3] is not None else 0.0
                stop_loss = user_data[4] if user_data[4] is not None else 0.0
                
                status_text += f"<b>ud83dudccf Param√®tres de risque:</b>\n"
                status_text += f"u2022 Facteur de risque: {risk_factor}x\n"
                status_text += f"u2022 Taille max: {max_position} USDT\n"
                status_text += f"u2022 Take Profit: {take_profit}%\n"
                status_text += f"u2022 Stop Loss: {stop_loss}%\n\n"
            
            # Positions fictives
            status_text += "<b>ud83dudcca Positions ouvertes:</b>\n"
            status_text += "BTC/USDT: Long 0.01 BTC √† 50,000 USDT (+1.2%)\n"
            status_text += "ETH/USDT: Short 0.2 ETH √† 2,500 USDT (-0.5%)\n\n"
            
            status_text += "<i>ud83dudca1 Note: Ces donn√©es sont des simulations pour le mode test</i>"
            
            # Ajouter des boutons pour les actions communes
            keyboard = [
                [{"text": "ud83dudcca Historique", "callback_data": "history"}],
                [{"text": "u2699ufe0f Risque", "callback_data": "risk"}, {"text": "ud83dude80 Activer", "callback_data": "subscribe"}],
                [{"text": "ud83dude45 D√©sactiver", "callback_data": "stop"}, {"text": "u2753 Aide", "callback_data": "help"}]
            ]
            
            # Envoyer le message avec les boutons
            send_telegram_message(chat_id, status_text, reply_markup={"inline_keyboard": keyboard})
            return
            
        # Si nous sommes ici, c'est que le mode test est d√©sactiv√© (TEST_MODE=False)
        # V√©rifier si l'utilisateur a des cl√©s API
        api_key, api_secret = await get_binance_keys(user["id"])
        if not api_key or not api_secret:
            send_telegram_message(chat_id, "<b>u26a0ufe0f Compte non configur√©</b>\n\nVous n'avez pas configur√© vos cl√©s API Binance. Utilisez la commande /api pour les configurer.")
            return
        
        # Mode normal - connecter √† Binance
        try:
            # Essayer de se connecter √† Binance
            client = await get_binance_client(api_key, api_secret)
            
            # R√©cup√©rer les informations du compte
            account = await client.futures_account()
            positions = await client.futures_position_information()
            
            # R√©cup√©rer les infos utilisateur de la base de donn√©es
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT is_active, risk_factor, max_position_size, take_profit, stop_loss FROM users WHERE telegram_id = ?", (user["id"],))
            user_data = cursor.fetchone()
            conn.close()
            
            # Construire le message
            total_balance = float(account["totalWalletBalance"])
            total_upnl = float(account["totalUnrealizedProfit"])
            
            # Texte du statut
            status_text = f"<b>ud83dudd0e Statut de votre compte</b>\n\n"
            
            if user_data and user_data[0] == 1:  # is_active
                status_text += "u2705 <b>Copy Trading:</b> Activ√©\n"
            else:
                status_text += "u274c <b>Copy Trading:</b> D√©sactiv√©\n"
            
            status_text += f"ud83dudcb0 <b>Solde:</b> {total_balance:.2f} USDT\n"
            status_text += f"ud83dudcb8 <b>PnL non r√©alis√©:</b> {total_upnl:.2f} USDT\n\n"
            
            # Param√®tres de risque
            if user_data:
                risk_factor = user_data[1] if user_data[1] is not None else 1.0
                max_position = user_data[2] if user_data[2] is not None else 0.0
                take_profit = user_data[3] if user_data[3] is not None else 0.0
                stop_loss = user_data[4] if user_data[4] is not None else 0.0
                
                status_text += f"<b>ud83dudccf Param√®tres de risque:</b>\n"
                status_text += f"u2022 Facteur de risque: {risk_factor}x\n"
                status_text += f"u2022 Taille max: {max_position} USDT\n"
                status_text += f"u2022 Take Profit: {take_profit}%\n"
                status_text += f"u2022 Stop Loss: {stop_loss}%\n\n"
            
            # Positions ouvertes
            active_positions = [p for p in positions if float(p["positionAmt"]) != 0]
            status_text += f"<b>ud83dudcca Positions ouvertes:</b> {len(active_positions)}\n"
            
            if active_positions:
                for pos in active_positions[:5]:  # Limiter √† 5 positions pour √©viter un message trop long
                    symbol = pos["symbol"]
                    side = "Long" if float(pos["positionAmt"]) > 0 else "Short"
                    amount = abs(float(pos["positionAmt"]))
                    entry_price = float(pos["entryPrice"])
                    mark_price = float(pos["markPrice"])
                    pnl = float(pos["unRealizedProfit"])
                    pnl_percent = (mark_price / entry_price - 1) * 100 if side == "Long" else (1 - mark_price / entry_price) * 100
                    
                    status_text += f"{symbol}: {side} {amount} √† {entry_price} ({pnl:.2f} USDT, {pnl_percent:.2f}%)\n"
                
                if len(active_positions) > 5:
                    status_text += f"... et {len(active_positions) - 5} autres positions\n"
            else:
                status_text += "Aucune position ouverte\n"
            
            # Ajouter des boutons pour les actions communes
            keyboard = [
                [{"text": "ud83dudcca Historique", "callback_data": "history"}],
                [{"text": "u2699ufe0f Risque", "callback_data": "risk"}, {"text": "ud83dude80 Activer", "callback_data": "subscribe"}],
                [{"text": "ud83dude45 D√©sactiver", "callback_data": "stop"}, {"text": "u2753 Aide", "callback_data": "help"}]
            ]
            
            # Envoyer le message avec les boutons
            send_telegram_message(chat_id, status_text, reply_markup={"inline_keyboard": keyboard})
        
        except Exception as e:
            # En cas d'erreur de connexion, afficher un message d'erreur explicite
            logger.error(f"Erreur lors de la connexion √† Binance: {e}")
            
            error_text = f"<b>u26a0ufe0f Erreur de connexion √† Binance</b>\n\n"
            error_text += "Impossible de se connecter √† Binance. Veuillez v√©rifier vos cl√©s API et votre connexion internet.\n\n"
            error_text += "<i>Astuce: Vous pouvez activer le mode test dans le fichier .env pour utiliser le bot sans connexion √† Binance.</i>"
            
            # Ajouter des boutons pour les actions alternatives
            keyboard = [
                [{"text": "ud83dude80 Activer mode test", "callback_data": "help"}],
                [{"text": "ud83dude4b Re-configurer API", "callback_data": "api"}]
            ]
            
            send_telegram_message(chat_id, error_text, reply_markup={"inline_keyboard": keyboard})
    
    except Exception as e:
        logger.error(f"Erreur dans handle_status_command: {e}")
        error_msg = f"<b>u26a0ufe0f Erreur</b>\n\nUne erreur s'est produite lors de la r√©cup√©ration de votre statut: {e}"
        send_telegram_message(chat_id, error_msg)

async def handle_history_command(chat_id, user, args=None):
    """Gestion de la commande /history pour voir l'historique des trades"""
    # V√©rifier si l'utilisateur est configur√©
    api_key, api_secret = await get_binance_keys(user["id"])
    
    if not api_key or not api_secret:
        send_telegram_message(chat_id, "<b>u26a0ufe0f Vous devez d'abord configurer vos cl√©s API</b>\n\nUtilisez /api pour configurer vos cl√©s API Binance.")
        return
    
    # Mode test
    test_mode = os.getenv("TEST_MODE", "False").lower() == "true"
    
    # En mode test, afficher des donn√©es simul√©es
    if test_mode:
        history_text = """<b>ud83dudcc3 Historique des Trades (MODE TEST)</b>

<b>Trades r√©cents:</b>
1. BTC/USDT: Long √† $42,500 - Ferm√© √† $43,200 (+3.5%)
2. ETH/USDT: Short √† $2,950 - Ferm√© √† $2,850 (+3.4%)
3. SOL/USDT: Long √† $85.50 - Ferm√© √† $88.20 (+3.2%)

<b>Performance totale:</b> +9.5%

Ces donn√©es sont simul√©es pour le mode test."""
        
        # Ajouter des boutons pour les actions communes
        keyboard = [
            [{"text": "ud83dudd0e Statut", "callback_data": "status"}],
            [{"text": "u2699ufe0f Risque", "callback_data": "risk"}, {"text": "ud83dude80 Activer", "callback_data": "subscribe"}],
            [{"text": "ud83dude45 D√©sactiver", "callback_data": "stop"}, {"text": "u2753 Aide", "callback_data": "help"}]
        ]
        
        send_telegram_message(chat_id, history_text, reply_markup={"inline_keyboard": keyboard})
        return
    
    # Mode normal - obtenir l'historique des trades r√©els
    try:
        # R√©cup√©rer l'ID de l'utilisateur dans la base de donn√©es
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user["id"],))
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            send_telegram_message(chat_id, "<b>u26a0ufe0f Utilisateur non trouv√©</b>\n\nVous n'√™tes pas enregistr√© dans la base de donn√©es.")
            return
        
        user_db_id = result[0]
        
        # R√©cup√©rer les trades de l'utilisateur
        cursor.execute("SELECT symbol, side, position_side, entry_price, exit_price, quantity, pnl, status, created_at FROM trades WHERE user_id = ? ORDER BY created_at DESC LIMIT 10", (user_db_id,))
        trades = cursor.fetchall()
        conn.close()
        
        if not trades:
            history_text = "<b>ud83dudcc3 Historique des Trades</b>\n\nVous n'avez pas encore de trades dans l'historique."
        else:
            # Calculer la performance totale
            total_pnl = sum(float(trade[6]) for trade in trades if trade[6] is not None)
            
            history_text = "<b>ud83dudcc3 Historique des Trades</b>\n\n<b>10 derniers trades:</b>\n"
            
            for i, trade in enumerate(trades, 1):
                symbol = trade[0]
                side = trade[1]
                entry_price = float(trade[3]) if trade[3] is not None else 0
                exit_price = float(trade[4]) if trade[4] is not None else 0
                quantity = float(trade[5]) if trade[5] is not None else 0
                pnl = float(trade[6]) if trade[6] is not None else 0
                status = trade[7]
                date = trade[8][:10] if trade[8] else ""
                
                pnl_percent = 0
                if entry_price > 0 and exit_price > 0:
                    if side.upper() == "BUY":
                        pnl_percent = ((exit_price / entry_price) - 1) * 100
                    else:
                        pnl_percent = ((1 - (exit_price / entry_price))) * 100
                
                history_text += f"{i}. {symbol}: {side.capitalize()} √† {entry_price} - "
                
                if status.upper() == "CLOSED":
                    history_text += f"Ferm√© √† {exit_price} ({pnl:.2f} USDT, {pnl_percent:.2f}%)\n"
                else:
                    history_text += f"Ouvert ({status})\n"
            
            history_text += f"\n<b>Performance totale:</b> {total_pnl:.2f} USDT"
        
        # Ajouter des boutons pour les actions communes
        keyboard = [
            [{"text": "ud83dudd0e Statut", "callback_data": "status"}],
            [{"text": "u2699ufe0f Risque", "callback_data": "risk"}, {"text": "ud83dude80 Activer", "callback_data": "subscribe"}],
            [{"text": "ud83dude45 D√©sactiver", "callback_data": "stop"}, {"text": "u2753 Aide", "callback_data": "help"}]
        ]
        
        send_telegram_message(chat_id, history_text, reply_markup={"inline_keyboard": keyboard})
    except Exception as e:
        logger.error(f"Erreur dans handle_history_command: {e}")
        send_telegram_message(
            chat_id,
            f"<b>u26a0ufe0f Erreur</b>\n\nUne erreur s'est produite lors de la r√©cup√©ration de votre historique: {e}"
        )
    
    finally:
        conn.close()

async def handle_stop_command(chat_id, user):
    """Gestion de la commande /stop pour d√©sactiver le copy trading"""
    # V√©rifier si l'utilisateur existe
    if not user:
        send_telegram_message(chat_id, "<b>u26a0ufe0f Erreur:</b> Votre compte n'est pas encore enregistr√©. Utilisez /start pour commencer.")
        return
    
    # D√©sactiver l'utilisateur dans la base de donn√©es
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("""
        UPDATE users SET 
            is_active = 0,
            updated_at = CURRENT_TIMESTAMP
        WHERE telegram_id = ?
    """, (user["id"],))
    
    conn.commit()
    conn.close()
    
    stop_text = """<b>u26d4 Copy Trading d√©sactiv√©</b>

Le copy trading a √©t√© d√©sactiv√© pour votre compte.
Vous ne recevrez plus les trades du compte ma√Ætre.

Notez que cela n'affecte pas vos positions ouvertes existantes.
Utilisez /start pour r√©activer le copy trading √† tout moment."""
    
    send_telegram_message(chat_id, stop_text)

async def handle_unregister_command(chat_id, user):
    """Gestion de la commande /unregister pour supprimer les cl√©s API d'un utilisateur"""
    try:
        # V√©rifier si l'utilisateur a des cl√©s enregistr√©es
        api_key, api_secret = await get_binance_keys(user["id"])
        
        if not api_key or not api_secret:
            send_telegram_message(chat_id, "<b>u26a0ufe0f Vous n'√™tes pas enregistr√©</b>\n\nVous n'avez pas de cl√©s API enregistr√©es dans le syst√®me.")
            return
        
        # Supprimer les cl√©s API de l'utilisateur de la base de donn√©es
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # D√©sactiver d'abord le copy trading pour cet utilisateur
        cursor.execute('UPDATE users SET is_active = 0, risk_factor = 0 WHERE telegram_id = ?', (user["id"],))
        
        # Supprimer les cl√©s API
        cursor.execute('UPDATE users SET binance_api_key = NULL, binance_api_secret = NULL WHERE telegram_id = ?', (user["id"],))
        
        conn.commit()
        conn.close()
        
        # Informer l'utilisateur
        send_telegram_message(
            chat_id,
            "<b>ud83dudd12 Cl√©s API supprim√©es avec succ√®s</b>\n\nVos cl√©s API ont √©t√© supprim√©es de notre syst√®me. Vous ne recevrez plus de copies de trades.\n\nVous pouvez vous r√©-enregistrer √† tout moment avec la commande /api."
        )
        
        # Mettre √† jour le copy trader
        global copy_trader
        if copy_trader and hasattr(copy_trader, 'reload_users'):
            copy_trader.reload_users()
        
        logger.info(f"Cl√©s API supprim√©es pour l'utilisateur {user['id']}")
    except Exception as e:
        logger.error(f"Erreur lors de la suppression des cl√©s API: {e}")
        send_telegram_message(
            chat_id,
            f"<b>u26a0ufe0f Erreur</b>\n\nUne erreur s'est produite lors de la suppression de vos cl√©s API: {e}"
        )

# Fonction principale pour le traitement des commandes
async def process_update(update):
    """Traite une mise √† jour de l'API Telegram"""
    # G√©rer les callback_query (boutons inline)
    if "callback_query" in update:
        callback_query = update["callback_query"]
        chat_id = callback_query["message"]["chat"]["id"]
        telegram_id = callback_query["from"]["id"]
        callback_data = callback_query["data"]
        
        # R√©cup√©rer l'utilisateur
        user = await get_user(telegram_id)
        
        # Traiter les diff√©rents callbacks
        if callback_data == "status":
            await handle_status_command(chat_id, user)
        elif callback_data == "history":
            await handle_history_command(chat_id, user, None)
        elif callback_data == "risk":
            await handle_risk_command(chat_id, user, None) 
        elif callback_data == "subscribe":
            await handle_subscribe_command(chat_id, user)
        elif callback_data == "stop":
            await handle_stop_command(chat_id, user)
        elif callback_data == "help":
            await handle_help_command(chat_id, user)
        elif callback_data == "api":
            await handle_api_command(chat_id, user, None)
        
        # R√©pondre √† la callback pour √©viter le "chargement" sur le bouton
        respond_to_callback_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
        response = requests.post(respond_to_callback_url, json={"callback_query_id": callback_query["id"]})
        return
        
    # Suite du code existant...
    if "message" not in update:
        return
    """Traite une mise √† jour de l'API Telegram"""
    if "message" not in update:
        return
    
    message = update["message"]
    if "text" not in message:
        return
    
    chat_id = message["chat"]["id"]
    text = message["text"]
    
    # Extraire les informations de l'utilisateur
    telegram_user = message.get("from", {})
    telegram_id = telegram_user.get("id")
    first_name = telegram_user.get("first_name")
    last_name = telegram_user.get("last_name")
    username = telegram_user.get("username")
    
    # R√©cup√©rer ou cr√©er l'utilisateur dans la base de donn√©es
    user = await get_user(telegram_id)
    if not user:
        # L'utilisateur n'existe pas encore, le cr√©er
        is_admin = telegram_id == ADMIN_ID
        await add_user(telegram_id, username, first_name, last_name, is_admin)
        user = await get_user(telegram_id)
        
        logger.info(f"Nouvel utilisateur cr√©√© : {telegram_id} (@{username})")
    
    # Traiter la commande
    if text.startswith("/"):
        parts = text.split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else None
        
        logger.info(f"Message du chat {chat_id}: {text}")
        
        # Traiter les commandes
        if command == "/start":
            await handle_start_command(chat_id, user)
        elif command == "/help":
            await handle_help_command(chat_id, user)
        elif command == "/subscribe":
            await handle_subscribe_command(chat_id, user)
        elif command == "/api":
            await handle_api_command(chat_id, user, args)
        elif command == "/risk":
            await handle_risk_command(chat_id, user, args)
        elif command == "/status":
            await handle_status_command(chat_id, user)
        elif command == "/history":
            await handle_history_command(chat_id, user, args)
        elif command == "/stop":
            await handle_stop_command(chat_id, user)
        elif command == "/unregister":
            await handle_unregister_command(chat_id, user)
        elif user_states.get(chat_id, {}).get("state") == "waiting_for_api_secret":
            # Si l'utilisateur est en train d'envoyer sa cl√© secr√®te
            await handle_api_command(chat_id, user, [text])
        else:
            # Commande inconnue
            send_telegram_message(chat_id, f"Commande non reconnue: {command}\n\nUtilisez /help pour voir la liste des commandes disponibles.")

# Boucle principale pour les mises √† jour
async def main():
    """Fonction principale du bot"""
    # Initialiser la base de donn√©es
    await init_db()
    
    # Ligne pour tester le token Telegram
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN non configur√© dans .env")
        return
    
    # Ligne pour l'admin
    if not ADMIN_ID:
        logger.warning("ADMIN_ID non configur√© dans .env - Certaines fonctionnalit√©s d'administration seront d√©sactiv√©es")
    
    # D√©marrer le copy trader
    await start_copy_trader()
    
    # Informer l'admin du d√©marrage
    if ADMIN_ID:
        welcome_message = """<b>u2705 Bot de Copy Trading d√©marr√©!</b>

Le bot est maintenant op√©rationnel et pr√™t √† traiter les commandes.

<b>ud83dudd27 Commandes disponibles:</b>

<b>Configuration:</b>
/start - D√©marrer le bot et afficher l'aide
/api - Configurer vos cl√©s API Binance
/unregister - Supprimer vos cl√©s API

<b>Trading:</b>
/subscribe - Activer le copy trading
/stop - D√©sactiver le copy trading
/risk - Configurer vos param√®tres de risque

<b>Suivi:</b>
/status - Voir l'√©tat de vos positions
/history - Consulter l'historique des trades

<b>Aide:</b>
/help - Afficher ce message d'aide

u2139ufe0f Mode de test: {test_mode_status}
u2139ufe0f Binance Testnet: {testnet_status}"""

        test_mode = os.getenv("TEST_MODE", "False").lower() == "true"
        testnet = os.getenv("BINANCE_TESTNET", "False").lower() == "true"
        
        test_mode_status = "Activ√© (pas de connexion r√©elle √† Binance)" if test_mode else "D√©sactiv√©"
        testnet_status = "Activ√© (environnement de test Binance)" if testnet else "D√©sactiv√© (environnement de production Binance)"

        send_telegram_message(ADMIN_ID, welcome_message.format(test_mode_status=test_mode_status, testnet_status=testnet_status))
    
    logger.info("Bot d√©marr√©, en attente des messages...")
    
    # Dernier update ID trait√©
    last_update_id = None
    
    # Boucle principale
    while True:
        try:
            # R√©cup√©rer les mises √† jour
            updates = await get_telegram_updates(offset=last_update_id)
            
            if updates["ok"]:
                for update in updates["result"]:
                    # Mettre √† jour le dernier ID trait√©
                    last_update_id = update["update_id"] + 1
                    
                    # Traiter la mise √† jour
                    await process_update(update)
            
            # Pause pour √©viter de surcharger l'API
            await asyncio.sleep(1)
        
        except Exception as e:
            logger.error(f"Erreur dans la boucle principale: {e}")
            await asyncio.sleep(5)

# Point d'entr√©e du programme
if __name__ == "__main__":
    # Configurer le logging
    logger.remove()
    logger.add(sys.stderr, level=os.getenv("LOG_LEVEL", "INFO"))
    logger.add("logs/copy_trader_{time}.log", rotation="10 MB")
    
    logger.info("D√©marrage du bot de copy trading...")
    
    # Ex√©cuter la boucle principale
    asyncio.run(main())
